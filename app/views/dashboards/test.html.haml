.page-header
  %h2
    = @dashboard.name
    %span#km
    %span#min

    %a.btn.btn-primary.active.pull-right{ :href => dashboards_path } All Dashboards
    %a.btn.btn-primary.active.pull-right{ :href => edit_dashboard_path(@dashboard) } Edit This
  %p#cams

  %p#notice= notice

.container
  .row
    .col-md-9.col-sm-7.col-xs-12#map
    .col-md-3.col-sm-5.col-xs-12#sidebar

= include_gon
:javascript

  $.widget("dash.dashboard", {

    options: {
      origin: new google.maps.LatLng( 22.338962, 114.041126 ),
      destination: new google.maps.LatLng( 22.503359, 114.107044 ),
      markers: [{id:1, data: '<div>info</div>', lat: 22.413568, lng: 114.112194 }],
      icon: {
        pin_a: '/assets/pin_a.png',
        pin_b: '/assets/pin_b.png',
        marker_onpath: '/assets/red_dot12x12.png',
        marker_offpath: '/assets/white_dot12x12.png'
      },

      directionRendererOptions: {
        draggable: true,
        polylineOptions: {
          strokeColor: '#FF00FF',
          strokeOpacity: 0.3,
          strokeWeight: 16
        }
      }
    },

    _sort_markers: function(markers, path, tol){
      var that = this,
          poly = new google.maps.Polyline({ path: path }),
          result = { onpath: [], offpath: [] };

      if (typeof tol === 'undefined') { tol = 1e-3 }
      $.each(markers, function(i,m){
        var point = new google.maps.LatLng(m.lat, m.lng),
            onEdge = google.maps.geometry.poly.isLocationOnEdge,
            origin = new google.maps.LatLng(path[0].lat(), path[0].lng());

        if (onEdge(point, poly, tol)) {
          $.extend(m, {
            options: { icon: that.options.icon.marker_onpath },
            distance: google.maps.geometry.spherical.computeDistanceBetween(origin, point)
          });
          result.onpath.push(m);
        } else {
          $.extend(m, {options: { icon: that.options.icon.marker_offpath }});
          result.offpath.push(m)
        }
      });
      result.onpath.sort(function(a,b){return (a.distance - b.distance); });
      return result;
    },

    _redraw_markers: function(markers, path) {
      var orig = path[0],
          dest = path[path.length-1],
          sorted_markers;

      sorted_markers = this._sort_markers(markers, path);

      this.options.origin = new google.maps.LatLng( orig.lat(), orig.lng() );
      this.options.destination = new google.maps.LatLng( dest.lat(), dest.lng() );

      this._trigger("on_markers_ready", null, sorted_markers);

      this.element.gmap3({
        clear: {
          name: 'marker'
        },
        marker: {
          values: markers,
          options: { draggable: false },
          events: { click: $.proxy(this._zoom_to_marker,this) }
        }
      });
    },

    _create: function() {
      var that = this;

      google.maps.visualRefresh = true;

      this.element.gmap3({
        map: {
          options: { scrollwheel: false },
          events: { click: $.proxy(this._zoom_all, this) }
        },
        trafficlayer: {},
        getroute: {
          options: {
            origin: this.options.origin,
            destination: this.options.destination,
            travelMode: google.maps.DirectionsTravelMode.DRIVING
          },

          callback: function(result){
            var path = result.routes[0].overview_path,
                leg = result.routes[0].legs[0];

            if (!result) return;

            that._trigger('on_route_ready', null, {
              distance: leg.distance.value,
              duration: leg.duration.value
            });

            that._redraw_markers(that.options.markers,path);

            $(this).gmap3({
              directionsrenderer: {
                options: $.extend(that.options.directionRendererOptions,
                  { directions: result }),
                events: {
                  directions_changed: function(result) {

                    var leg = result.directions.routes[0].legs[0],
                        path = result.directions.routes[0].overview_path;

                    that._trigger('on_route_ready', null, {
                      distance: leg.distance.value,
                      duration: leg.duration.value
                    });

                    that._redraw_markers(that.options.markers,path);
                  }
                }
              } // directionsrenderer
            });

          }
        }
      });
    },

    _zoom_all: function(obj) {
      var el = this.element,
          map = el.gmap3("get"),
          bounds = new google.maps.LatLngBounds();

      bounds.extend(this.options.origin);
      bounds.extend(this.options.destination);
      map.fitBounds(bounds);
    },

    _zoom_to_marker: function(marker, event, context){
      var el = this.element,
          map = el.gmap3("get"),
          infowindow = el.gmap3({get:{name:"infowindow"}});

      if (! infowindow ) {
        el.gmap3({
          infowindow: {
            anchor: marker,
            option: { content: context.data }
          }
        });
        infowindow = el.gmap3({get:{name:"infowindow"}});
      }

      infowindow.open(map, marker);
      infowindow.setContent(context.data);
      map.setZoom(15);
      map.panTo(marker.position);
    },

    _destroy: function() {}
  });

  $('#map').dashboard({
    origin: new google.maps.LatLng(gon.origin.lat, gon.origin.lng),
    destination: new google.maps.LatLng(gon.destination.lat, gon.destination.lng),
    markers: gon.markers,

    on_route_ready: function(event, data){
      $('#km').text(': '+(data.distance/1000).toFixed(2)+'km');
      $('#min').text('/ '+(data.duration/60).toFixed(2)+'min');
    },

    on_markers_ready: function(event, data){
      var onpath_cams = data.onpath,
          count = onpath_cams.length,
          htmls = onpath_cams.map(function(c) {return c.data});
      $('#cams').text(count + ' traffic cameras on path')
      $('#sidebar').empty().append(htmls);

    }
  });


